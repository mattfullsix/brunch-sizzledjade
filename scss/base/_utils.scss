/*------------------------------------*\
    _utils.scss
\*------------------------------------*/
/**
 *
 * Custom variables
 * =colors............basic colors
 * =fontsize..........overrides inuit.css font sizes
 * =dimensions........overrides inuit.css breakpoints
 * =paths.............custom paths
 *
 * 'toolbox' : extends, helpers, mixins
 * =fonts.................arial
 * =extends...............global extends
 * =helpers...............global helpers
 * =mixins................global mixins
 * =custommixins..........custom mixins (see http://hackingui.com/front-end/10-best-scss-utilities/)
 * =modernizr mixin.......modernizr features mixins
 *
 */

/*------------------------------------*\
    $Custom vars
\*------------------------------------*/

/**
* =colors
*/
$map-colors : (
    white:                     #ffffff,
    black:                     #000000,
    grey:                      #666666,        // body font
    grey-dark:                 #333333,        // darker grey
    silver:                    #B2B2B2,        // borders
    silver-light:              #f5f5f5,        // lighter borders
    red:                       #e30000,        // error color
    baselink:                  #0000EE         // standard link color
    // cutsom //
);

/**
 * =fontsize
 */
$map-fonts : (
    h1-size:                   40px,           // .alpha
    h2-size:                   30px,           // .beta
    h3-size:                   24px,           // .gamma
    h4-size:                   18px,           // .delta
    h5-size:                   14px,           // .epsilon
    h6-size:                   12px            // .zeta
);

$body-size:                    14px;           // base body size
$base-font-size:               12px!default;   // base font size
$base-font-multiplicator:      1rem;           // rem base font multiplicator
$font-multiplicator:           0.7rem;         // rem font multiplicator
$base-line-height:             1;

/**
 * =dimensions
 */
$map-dimensions : (
    max-width:                 1024px,         // width maximum
    min-width:                 320px,          // width minimum
    c-grid-max:                190px,
    c-grid-min:                190px,
    article-max:               200px,
    article-min:               200px
);

/**
 * =paths
 */
$map-path : (
    path-img :      'img/',
    path-icons:     'img/icons',
    path-bg:        'img/backgrounds'
);

/*------------------------------------*\
    $toolbox
\*------------------------------------*/

/**
 * =fonts
 */
.extd-basefontstyle {
    @extend .extd-naked;
    @extend .arial;
    line-height:normal;
}

.arial {
    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
    font-weight:400;
    font-style:normal;
}

.arial-bold {
    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
    font-weight:700;
    font-style:normal;
}

.georgia {
    font-family: Georgia, Times, Times New Roman, serif;
    font-weight:400;
    font-style:normal;
}

 /**
 * =extends
 */
.extd-inline-block {
    display:inline-block;
    *display:inline;
    *zoom:1;
}

.inbl {
    display:inline-block;
    vertical-align:middle;
}

.extd-naked {
    border:none;
    margin:0;
    padding:0;
}

.extd-centered {
    margin:0 auto;
}

.extd-no-bullets{
    list-style-image: none;
    list-style-type: none;
    margin-left: 0;
    padding-left: 0;
}

.extd-center-vertical {
    display:inline-block;
    vertical-align:middle;
    line-height:1.2;
}

/**
 * =helpers
 */
.hyphens {
    word-wrap: break-word;
    -webkit-hyphens: auto;
      -epub-hyphens: auto;
       -moz-hyphens: auto;
        -ms-hyphens: auto;
         -o-hyphens: auto;
            hyphens: auto;
}

.text-centered {
    text-align: center;
}

.text-right {
    text-align: right;
}

.text-left {
    text-align: left;

}

.ir {
    background-color: transparent;
    border: 0;
    overflow: hidden;
    *text-indent: -9999px;
}

.ir:before {
    content: "";
    display: block;
    width: 0;
    height: 150%;
}

.hidden, .phone-hidden {
    display: none !important;
    visibility: hidden;
}

.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}

.invisible {
    visibility: hidden;
}

.push-right {
    float:right;
}

.push-left {
    float:left;
}

.clearfix {
    clear: both;
}

/**
 * =mixins
 */
@mixin font-face($font-url, $font-filename, $font-aliasname, $weight) {
  @font-face {
    font: {
      family: $font-aliasname;
      style: normal;
      weight: $weight;
    }
    src: url($font-url + "/" + $font-filename + ".eot");
    src: url($font-url + "/" + $font-filename + ".eot?#stopIE678here") format('forceIE9woff'),
    url($font-url + "/" + $font-filename + ".woff") format("woff"),
    url($font-url + "/" + $font-filename + ".ttf") format("truetype");
  }
}

/* font-size */
@mixin font-size($font-size, $line-height:true){
    font-size:$font-size;
    font-size:($font-size / $base-font-size)*$base-font-multiplicator;
    @if $line-height == true{
        line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}

@mixin box-shadow($val, $val) {
    box-shadow: $val;
    -moz-box-shadow: $val;
    -webkit-box-shadow: $val;
}

@mixin border-radius($val) {
    -webkit-border-radius: $val;
    -moz-border-radius: $val;
    border-radius: $val;
}

/**
 * =modernizr mixin
 */
@mixin modernizr($features, $supports) {
  $everything-okay: true;
  $prefix: if($supports, '', 'no-');
  $selector: if($supports, '', (unquote('.no-js')));
  $placeholder: if($supports, '%yep', '%nope');

  @each $feature in $features {
    @if type-of($feature) != string {
      $everything-okay: false;
      @warn '`#{$feature} is not a string for `modernizr`';
    } @else {
      $placeholder: $placeholder + '-' + $feature;
      $new-selector: #{'.' + $prefix + $feature};
      $selector: if($supports, $selector + $new-selector, append($selector, $new-selector, comma));
    }
  }

  @if $everything-okay == true {
    #{$placeholder} & {
      @content;
    }
    @at-root #{$selector} {
      @extend #{$placeholder};
    }
  }
}

// Usage:
// .my-selector {
//   @include yep($features) { ... }
//   @include nope($features) { ... {
// }
@mixin yep($features) {
  @include modernizr($features, $supports: true) {
    @content;
  }
}

@mixin nope($features) {
  @include modernizr($features, $supports: false) {
    @content;
  }
}

// Single side border-radius
@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}
